This is my code for Part -2 of Workshop-5 but my outputs are not matching the required outputs.Kindly correct this code.


#define _CRT_SECURE_NO_WARNINGS
#define MIN_PATH 10
#define MAX_PATH 70
#define PATH_WIDTH 5
#include <stdio.h>
struct Playerinfo
{
int lives;
char symbol;
int treasure;
int history[MAX_PATH];
};
struct Gameinfo
{
int moves;
int path;
int bombs[MAX_PATH];
int treasure_path[MAX_PATH];
};
int main(void) {
struct Playerinfo playerOne;
struct Gameinfo gameOne;
int k = 0, move, m = 0, x = 0, i, line3[MAX_PATH];
char line1[MAX_PATH], line2[MAX_PATH], line0[MAX_PATH];
printf("================================\n"
" Treasure Hunt! \n"
"================================\n\n");
printf("PLAYER Configuration\n"
"--------------------\n");
printf("Enter a single character to represent the player: ");
scanf(" %c", &playerOne.symbol);
while (k == 0) {
printf("Set the number of lives: ");
scanf("%d", &playerOne.lives);
if (playerOne.lives < 1 || playerOne.lives > 10)
printf(" Must be between 1 and 10!\n");
else {
printf("Player configuration set-up is complete\n");
k = 1;
}
}
k = 0;
printf("\nGAME Configuration\n"
"------------------\n");
while (k == 0) {
printf("Set the path length (a multiple of 5 between 10-70): ");
scanf("%d", &gameOne.path);
if (gameOne.path >= 10 && gameOne.path <= 70 && (gameOne.path % 5) ==
0)
k = 1;
else
printf(" Must be a multiple of 5 and between 10-70!!!\n");
}
k = 0;
while (k == 0) {
printf("Set the limit for number of moves allowed: ");
scanf("%d", &gameOne.moves);
if (gameOne.moves < 3 || gameOne.moves > 15)
printf(" Value must be between 3 and 15\n");
else
k = 1;
}
k = 0;
printf("\nBOMB Placement\n"
"--------------\n"
"Enter the bomb positions in sets of 5 where a value\n"
"of 1=BOMB, and 0=NO BOMB. Space-delimit your input.\n"
"(Example: 1 0 0 1 1) NOTE: there are 20 to set!\n");
for (i = 0; i < (gameOne.path / PATH_WIDTH); i++) {
printf(" Positions [%2d-%2d]: ", x + 1, x + 5);
scanf(" %d %d %d %d %d", &gameOne.bombs[x], &gameOne.bombs[x + 1],
&gameOne.bombs[x + 2], &gameOne.bombs[x + 3], &gameOne.bombs[x + 4]);
x += PATH_WIDTH;
}
x = 0;
printf("BOMB placement set\n"
"\nTREASURE Placement\n"
"------------------\n"
"Enter the treasure placements in sets of 5 where a value\n"
"of 1=TREASURE, and 0=NO TREASURE. Space-delimit your input.\n"   
"(Example: 1 0 0 1 1) NOTE: there are 20 to set!\n");
for (i = 0; i < (gameOne.path / PATH_WIDTH); i++) {
printf(" Positions [%2d-%2d]: ", x + 1, x + 5);
scanf(" %d %d %d %d %d", &gameOne.treasure_path[x],
&gameOne.treasure_path[x + 1], &gameOne.treasure_path[x + 2],
&gameOne.treasure_path[x + 3], &gameOne.treasure_path[x + 4]);
x += PATH_WIDTH;
}
printf("TREASURE placement set\n"
"\nGAME configuration set-up is complete...\n"
"\n------------------------------------\n"
"TREASURE HUNT Configuration Settings\n"
"------------------------------------\n"
"Player:\n"
" Symbol : %c\n"
" Lives : %d\n"
" Treasure : [ready for gameplay]\n"
" History : [ready for gameplay]\n", playerOne.symbol,
playerOne.lives);
printf("\nGame:\n"
" Path Length: %d\n"
" Bombs : ", gameOne.path);
for (i = 0; i < gameOne.path; i++) {
printf("%d", gameOne.bombs[i]);
}
printf("\n Treasure : ");
for (i = 0; i < gameOne.path; i++) {
printf("%d", gameOne.treasure_path[i]);
}
printf("\n\n====================================\n"
"~ Get ready to play TREASURE HUNT! ~\n"
"====================================\n");
x = 1;
for (i = 0; i < gameOne.path; i++) {
line1[i] = '-';
line0[i] = ' ';
line2[i] = '|';
switch (i)
{
case 9:
line2[i] = '1';
break;
case 19:
line2[i] = '2';
break;
case 29:
line2[i] = '3';
break;
case 39:
line2[i] = '4';
break;
}
if (x > 9) {
x = 1;
line3[i] = 0;
}
else {
line3[i] = x;
x += 1;
}
}
x = 0;
playerOne.treasure = 0;
while (k == 0) {
for (i = 0; i < gameOne.path; i++)
printf("%c", line1[i]);
printf("\n");
for (i = 0; i < gameOne.path; i++)
printf("%c", line2[i]);
printf("\n");
for (i = 0; i < gameOne.path; i++)
printf("%d", line3[i]);
printf("\n+---------------------------------------------------+\n"
" Lives: %d | Treasures: %d | Moves Remaining: %d \n"
"+---------------------------------------------------+\n",
playerOne.lives, playerOne.treasure, gameOne.moves);
while (x == 0) {
printf("Next Move [1-20]: ");
scanf("%d", &move);
if (move < 1 || move > 20)
printf(" Out of Range!!!\n");
else
x = 1;
}
x = 0;
for (i = 0; i < MAX_PATH; i++) {
line0[i] = ' ';
}
line0[move - 1] = playerOne.symbol;
if (playerOne.history[move] == 1)
m = 1;
else
m = 0;
playerOne.history[move] = 1;
if (m == 0) {
if (gameOne.bombs[move - 1] == 1) {
printf("\n===============> [&] !!! BOOOOOM !!! [&]\n\n");
playerOne.lives--;
gameOne.moves--;
line1[move - 1] = '!';
}
else if (gameOne.treasure_path[move - 1] == 1) {
printf("\n===============> [$] $$$ Found Treasure! $$$ [$]\n\n");
playerOne.treasure++;
gameOne.moves--;
line1[move - 1] = '$';
}
else if (gameOne.bombs[move - 1] == 0 &&
gameOne.treasure_path[move - 1] == 0) {
playerOne.lives--;
playerOne.treasure++;
gameOne.moves--;
line1[move - 1] = '&';
printf("\n===============> [&] !!! BOOOOOM !!! [&] \n============== = > [&] $$$ Life Insurance Payout!!![&]\n\n");
}
else {
gameOne.moves--;
line1[move - 1] = '.';
printf("\n===============> [.] ...Nothing found here... [.]\n\n");
}
}
else if (m == 1)
printf("\n===============> Dope! You've been here before!\n\n");
m = 0;
if (playerOne.lives == 0 || gameOne.moves == 0) {
k = 1;
}
if (k == 0) {
for (i = 0; i < gameOne.path; i++)
printf("%c", line0[i]);
printf("\n");
}
}
for (i = 0; i < gameOne.path; i++)
printf("%c", line0[i]);
printf("\n");
for (i = 0; i < gameOne.path; i++)
printf("%c", line1[i]);
printf("\n");
for (i = 0; i < gameOne.path; i++)
printf("%c", line2[i]);
printf("\n");
for (i = 0; i < gameOne.path; i++)
printf("%d", line3[i]);
printf("\n+---------------------------------------------------+\n"
" Lives: %d | Treasures: %d | Moves Remaining: %d \n"
"+---------------------------------------------------+\n",
playerOne.lives, playerOne.treasure, gameOne.moves);
printf("""\n##################\n"
"# Game over! #\n"
"##################\n"
"\nYou should play again and try to beat your score!!\n");
return 0;
}



